// <auto-generated />
using System;
using Infrastracture.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastracture.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221015084942_InitializeMigration")]
    partial class InitializeMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Models.CalculationModels.CategoryPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CategoryPositions");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.JobCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.JobYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("JobCategoryId")
                        .HasColumnType("bigint");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<long>("ServiceYearId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("ServiceYearId");

                    b.ToTable("JobYears");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ArmyTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CategoryPositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SecretLevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArmyTypeId");

                    b.HasIndex("CategoryPositionId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("SecretLevelId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.Qualification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.RankSalary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ArmyRankId")
                        .HasColumnType("bigint");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmyRankId");

                    b.ToTable("RankSalaries");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.SecretLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SecretLevels");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.ServiceYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ServiceYears");
                });

            modelBuilder.Entity("Domain.Models.NotificationModels.PhoneNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNotifications");
                });

            modelBuilder.Entity("Domain.Models.ProfileModels.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AreaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<string>("ConfirmedSIGN")
                        .HasColumnType("longtext");

                    b.Property<int?>("ConfirmedStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmedUserIIN")
                        .HasColumnType("longtext");

                    b.Property<long?>("ConfirmedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequestedSIGN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RequestedStatus")
                        .HasColumnType("int");

                    b.Property<string>("RequestedUserIIN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("RequestedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("StepGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("StepId")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ConfirmedUserId");

                    b.HasIndex("RequestedUserId");

                    b.HasIndex("StepGroupId");

                    b.HasIndex("StepId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Domain.Models.ProfileModels.ProfileFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileFiles");
                });

            modelBuilder.Entity("Domain.Models.StepModels.Step", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ConfirmedRoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayLimit")
                        .HasColumnType("int");

                    b.Property<bool>("IsFirst")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLast")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("RequestedRoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("StepGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmedRoleId");

                    b.HasIndex("RequestedRoleId");

                    b.HasIndex("StepGroupId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Domain.Models.StepModels.StepGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StepGroups");
                });

            modelBuilder.Entity("Domain.Models.StepModels.StepOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("NextStepId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreviousStepId")
                        .HasColumnType("bigint");

                    b.Property<long>("StepId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NextStepId");

                    b.HasIndex("PreviousStepId");

                    b.HasIndex("StepId");

                    b.ToTable("StepOrders");
                });

            modelBuilder.Entity("Domain.Models.SurveyModels.Survey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("Agreed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Appartment")
                        .HasColumnType("longtext");

                    b.Property<long>("AreaId")
                        .HasColumnType("bigint");

                    b.Property<string>("ArmyNumber")
                        .HasColumnType("longtext");

                    b.Property<long?>("ArmyRankId")
                        .HasColumnType("bigint");

                    b.Property<string>("AutoBiography")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("BirthAreaId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ContractYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CurrentStepId")
                        .HasColumnType("bigint");

                    b.Property<string>("DermatologUrl")
                        .HasColumnType("longtext");

                    b.Property<long>("EducationId")
                        .HasColumnType("bigint");

                    b.Property<string>("EducationUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmploymentUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Experienced")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Home")
                        .HasColumnType("longtext");

                    b.Property<string>("IIN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityCardUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IncomePropertyUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("MedicalStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("MillitaryUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NarcologicalUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<string>("PositionName")
                        .HasColumnType("longtext");

                    b.Property<string>("PsychoNeurologicalUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Served")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ServedArmyNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("SignKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecialCheckUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("StepGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TuberUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VTShId")
                        .HasColumnType("bigint");

                    b.Property<bool>("VTShServed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("VTShYear")
                        .HasColumnType("longtext");

                    b.Property<long?>("VacancyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ArmyRankId");

                    b.HasIndex("BirthAreaId");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("EducationId");

                    b.HasIndex("MedicalStatusId");

                    b.HasIndex("PositionId");

                    b.HasIndex("StepGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("VTShId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Domain.Models.SurveyModels.SurveyDriver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("DriverLicenseId")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DriverLicenseId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyDrivers");
                });

            modelBuilder.Entity("Domain.Models.SurveyModels.SurveyExecutor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("DirectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExecutorId")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyExecutors");
                });

            modelBuilder.Entity("Domain.Models.SurveyModels.SurveyRelative", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IIN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Patronomic")
                        .HasColumnType("longtext");

                    b.Property<long>("RelativeId")
                        .HasColumnType("bigint");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RelativeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyRelatives");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("RegionNumber")
                        .HasColumnType("int");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.ArmyDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ArmyDepartments");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.ArmyRank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ArmyRanks");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.ArmyRegion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ArmyRegions");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.ArmyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ArmyTypes");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.DriverLicense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DriverLicenses");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.Education", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.MedicalStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MedicalStatuses");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.Relative", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("Domain.Models.SystemModels.VTSh", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("VtShes");
                });

            modelBuilder.Entity("Domain.Models.UserModels.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleKz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Models.UserModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AreaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IIN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Patronymic")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.VacancyModel.Vacancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AreaId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArmyRegionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArmyTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionKz")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("JobCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QualificationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("SecretLevelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ArmyRegionId");

                    b.HasIndex("ArmyTypeId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("PositionId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("SecretLevelId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.JobYear", b =>
                {
                    b.HasOne("Domain.Models.CalculationModels.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CalculationModels.ServiceYear", "ServiceYear")
                        .WithMany()
                        .HasForeignKey("ServiceYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCategory");

                    b.Navigation("ServiceYear");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.Position", b =>
                {
                    b.HasOne("Domain.Models.SystemModels.ArmyType", "ArmyType")
                        .WithMany()
                        .HasForeignKey("ArmyTypeId");

                    b.HasOne("Domain.Models.CalculationModels.CategoryPosition", "CategoryPosition")
                        .WithMany()
                        .HasForeignKey("CategoryPositionId");

                    b.HasOne("Domain.Models.CalculationModels.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CalculationModels.SecretLevel", "SecretLevel")
                        .WithMany()
                        .HasForeignKey("SecretLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmyType");

                    b.Navigation("CategoryPosition");

                    b.Navigation("JobCategory");

                    b.Navigation("SecretLevel");
                });

            modelBuilder.Entity("Domain.Models.CalculationModels.RankSalary", b =>
                {
                    b.HasOne("Domain.Models.SystemModels.ArmyRank", "ArmyRank")
                        .WithMany()
                        .HasForeignKey("ArmyRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmyRank");
                });

            modelBuilder.Entity("Domain.Models.NotificationModels.PhoneNotification", b =>
                {
                    b.HasOne("Domain.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.ProfileModels.Profile", b =>
                {
                    b.HasOne("Domain.Models.SystemModels.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserModels.User", "ConfirmedUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedUserId");

                    b.HasOne("Domain.Models.UserModels.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.StepModels.StepGroup", "StepGroup")
                        .WithMany()
                        .HasForeignKey("StepGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.StepModels.Step", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SurveyModels.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("ConfirmedUser");

                    b.Navigation("RequestedUser");

                    b.Navigation("Step");

                    b.Navigation("StepGroup");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Models.ProfileModels.ProfileFile", b =>
                {
                    b.HasOne("Domain.Models.ProfileModels.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Models.StepModels.Step", b =>
                {
                    b.HasOne("Domain.Models.UserModels.Role", "ConfirmedRole")
                        .WithMany()
                        .HasForeignKey("ConfirmedRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserModels.Role", "RequestedRole")
                        .WithMany()
                        .HasForeignKey("RequestedRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.StepModels.StepGroup", "StepGroup")
                        .WithMany("Steps")
                        .HasForeignKey("StepGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmedRole");

                    b.Navigation("RequestedRole");

                    b.Navigation("StepGroup");
                });

            modelBuilder.Entity("Domain.Models.StepModels.StepOrder", b =>
                {
                    b.HasOne("Domain.Models.StepModels.Step", "NextStep")
                        .WithMany()
                        .HasForeignKey("NextStepId");

                    b.HasOne("Domain.Models.StepModels.Step", "PreviousStep")
                        .WithMany()
                        .HasForeignKey("PreviousStepId");

                    b.HasOne("Domain.Models.StepModels.Step", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextStep");

                    b.Navigation("PreviousStep");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Domain.Models.SurveyModels.Survey", b =>
                {
                    b.HasOne("Domain.Models.SystemModels.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SystemModels.ArmyRank", "ArmyRank")
                        .WithMany()
                        .HasForeignKey("ArmyRankId");

                    b.HasOne("Domain.Models.SystemModels.Area", "BirthArea")
                        .WithMany()
                        .HasForeignKey("BirthAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.StepModels.Step", "CurrentStep")
                        .WithMany()
                        .HasForeignKey("CurrentStepId");

                    b.HasOne("Domain.Models.SystemModels.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SystemModels.MedicalStatus", "MedicalStatus")
                        .WithMany()
                        .HasForeignKey("MedicalStatusId");

                    b.HasOne("Domain.Models.CalculationModels.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.StepModels.StepGroup", "StepGroup")
                        .WithMany()
                        .HasForeignKey("StepGroupId");

                    b.HasOne("Domain.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SystemModels.VTSh", "VTSh")
                        .WithMany()
                        .HasForeignKey("VTShId");

                    b.HasOne("Domain.Models.VacancyModel.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId");

                    b.Navigation("Area");

                    b.Navigation("ArmyRank");

                    b.Navigation("BirthArea");

                    b.Navigation("CurrentStep");

                    b.Navigation("Education");

                    b.Navigation("MedicalStatus");

                    b.Navigation("Position");

                    b.Navigation("StepGroup");

                    b.Navigation("User");

                    b.Navigation("VTSh");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Domain.Models.SurveyModels.SurveyDriver", b =>
                {
                    b.HasOne("Domain.Models.SystemModels.DriverLicense", "DriverLicense")
                        .WithMany()
                        .HasForeignKey("DriverLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SurveyModels.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverLicense");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Models.SurveyModels.SurveyExecutor", b =>
                {
                    b.HasOne("Domain.Models.UserModels.User", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserModels.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SurveyModels.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Executor");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Models.SurveyModels.SurveyRelative", b =>
                {
                    b.HasOne("Domain.Models.SystemModels.Relative", "Relative")
                        .WithMany()
                        .HasForeignKey("RelativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SurveyModels.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relative");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Models.UserModels.User", b =>
                {
                    b.HasOne("Domain.Models.SystemModels.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("Domain.Models.UserModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.VacancyModel.Vacancy", b =>
                {
                    b.HasOne("Domain.Models.SystemModels.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SystemModels.ArmyRegion", "ArmyRegion")
                        .WithMany()
                        .HasForeignKey("ArmyRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SystemModels.ArmyType", "ArmyType")
                        .WithMany()
                        .HasForeignKey("ArmyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Domain.Models.CalculationModels.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CalculationModels.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CalculationModels.Qualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CalculationModels.SecretLevel", "SecretLevel")
                        .WithMany()
                        .HasForeignKey("SecretLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("ArmyRegion");

                    b.Navigation("ArmyType");

                    b.Navigation("Author");

                    b.Navigation("JobCategory");

                    b.Navigation("Position");

                    b.Navigation("Qualification");

                    b.Navigation("SecretLevel");
                });

            modelBuilder.Entity("Domain.Models.StepModels.StepGroup", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
